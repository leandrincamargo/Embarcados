CCS PCM C Compiler, Version 5.008, 5967               23-nov-18 20:36

               Filename:   D:\GIT\GitHub\Embarcados\PIC\main.lst

               ROM used:   671 words (33%)
                           Largest free fragment is 1377
               RAM used:   7 (3%) at main() level
                           18 (8%) worst case
               Stack used: 4 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   202
0003:  NOP
.................... #include <main.h> 
.................... #include <16F628A.h> 
.................... //////// Standard Header file for the PIC16F628A device //////////////// 
.................... #device PIC16F628A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  BCF    0A.0
000D:  BCF    0A.1
000E:  BCF    0A.2
000F:  ADDWF  02,F
0010:  RETLW  0C
0011:  RETLW  52
0012:  RETLW  65
0013:  RETLW  61
0014:  RETLW  64
0015:  RETLW  79
0016:  RETLW  2E
0017:  RETLW  2E
0018:  RETLW  2E
0019:  RETLW  0A
001A:  RETLW  00
001B:  BCF    0A.0
001C:  BCF    0A.1
001D:  BCF    0A.2
001E:  ADDWF  02,F
001F:  RETLW  0C
0020:  RETLW  4C
0021:  RETLW  69
0022:  RETLW  67
0023:  RETLW  61
0024:  RETLW  72
0025:  RETLW  20
0026:  RETLW  71
0027:  RETLW  75
0028:  RETLW  61
0029:  RETLW  72
002A:  RETLW  74
002B:  RETLW  6F
002C:  RETLW  20
002D:  RETLW  0A
002E:  RETLW  00
002F:  BCF    0A.0
0030:  BCF    0A.1
0031:  BCF    0A.2
0032:  ADDWF  02,F
0033:  RETLW  0C
0034:  RETLW  44
0035:  RETLW  65
0036:  RETLW  73
0037:  RETLW  6C
0038:  RETLW  69
0039:  RETLW  67
003A:  RETLW  61
003B:  RETLW  72
003C:  RETLW  20
003D:  RETLW  71
003E:  RETLW  75
003F:  RETLW  61
0040:  RETLW  72
0041:  RETLW  74
0042:  RETLW  6F
0043:  RETLW  20
0044:  RETLW  0A
0045:  RETLW  00
0046:  BCF    0A.0
0047:  BCF    0A.1
0048:  BCF    0A.2
0049:  ADDWF  02,F
004A:  RETLW  0C
004B:  RETLW  4C
004C:  RETLW  69
004D:  RETLW  67
004E:  RETLW  61
004F:  RETLW  72
0050:  RETLW  20
0051:  RETLW  73
0052:  RETLW  61
0053:  RETLW  6C
0054:  RETLW  61
0055:  RETLW  20
0056:  RETLW  0A
0057:  RETLW  00
0058:  BCF    0A.0
0059:  BCF    0A.1
005A:  BCF    0A.2
005B:  ADDWF  02,F
005C:  RETLW  0C
005D:  RETLW  44
005E:  RETLW  65
005F:  RETLW  73
0060:  RETLW  6C
0061:  RETLW  69
0062:  RETLW  67
0063:  RETLW  61
0064:  RETLW  72
0065:  RETLW  20
0066:  RETLW  73
0067:  RETLW  61
0068:  RETLW  6C
0069:  RETLW  61
006A:  RETLW  20
006B:  RETLW  0A
006C:  RETLW  00
006D:  BCF    0A.0
006E:  BCF    0A.1
006F:  BCF    0A.2
0070:  ADDWF  02,F
0071:  RETLW  0C
0072:  RETLW  4C
0073:  RETLW  69
0074:  RETLW  67
0075:  RETLW  61
0076:  RETLW  72
0077:  RETLW  20
0078:  RETLW  74
0079:  RETLW  75
007A:  RETLW  64
007B:  RETLW  6F
007C:  RETLW  20
007D:  RETLW  0A
007E:  RETLW  00
007F:  BCF    0A.0
0080:  BCF    0A.1
0081:  BCF    0A.2
0082:  ADDWF  02,F
0083:  RETLW  0C
0084:  RETLW  44
0085:  RETLW  65
0086:  RETLW  73
0087:  RETLW  6C
0088:  RETLW  69
0089:  RETLW  67
008A:  RETLW  61
008B:  RETLW  72
008C:  RETLW  20
008D:  RETLW  74
008E:  RETLW  75
008F:  RETLW  64
0090:  RETLW  6F
0091:  RETLW  20
0092:  RETLW  0A
0093:  RETLW  00
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(crystal=12MHz) 
0094:  MOVLW  24
0095:  MOVWF  04
0096:  BCF    03.7
0097:  MOVF   00,W
0098:  BTFSC  03.2
0099:  GOTO   0A8
009A:  MOVLW  03
009B:  MOVWF  78
009C:  CLRF   77
009D:  DECFSZ 77,F
009E:  GOTO   09D
009F:  DECFSZ 78,F
00A0:  GOTO   09C
00A1:  MOVLW  E3
00A2:  MOVWF  77
00A3:  DECFSZ 77,F
00A4:  GOTO   0A3
00A5:  NOP
00A6:  DECFSZ 00,F
00A7:  GOTO   09A
00A8:  RETURN
.................... #use rs232(baud=9600,xmit=PIN_B3,rcv=PIN_B1,bits=8) 
*
01DD:  BSF    03.5
01DE:  BSF    06.1
01DF:  BCF    03.5
01E0:  BTFSC  06.1
01E1:  GOTO   1E0
01E2:  MOVLW  08
01E3:  MOVWF  77
01E4:  CLRF   22
01E5:  BSF    77.7
01E6:  GOTO   1F5
01E7:  BCF    77.7
01E8:  GOTO   1F5
01E9:  BCF    03.0
01EA:  BTFSC  06.1
01EB:  BSF    03.0
01EC:  RRF    22,F
01ED:  BSF    77.6
01EE:  GOTO   1F5
01EF:  BCF    77.6
01F0:  DECFSZ 77,F
01F1:  GOTO   1E9
01F2:  MOVF   22,W
01F3:  MOVWF  78
01F4:  GOTO   201
01F5:  MOVLW  61
01F6:  BTFSC  77.7
01F7:  MOVLW  1A
01F8:  MOVWF  78
01F9:  DECFSZ 78,F
01FA:  GOTO   1F9
01FB:  GOTO   1FC
01FC:  BTFSC  77.7
01FD:  GOTO   1E7
01FE:  BTFSC  77.6
01FF:  GOTO   1EF
0200:  GOTO   1E9
0201:  GOTO   220 (RETURN)
....................  
....................  
.................... #define LCD_ENABLE_PIN PIN_B0 
.................... #define LCD_RS_PIN PIN_A0 
.................... #define LCD_RW_PIN PIN_B2 
.................... #define LCD_DATA4 PIN_B4 
.................... #define LCD_DATA5 PIN_B5 
.................... #define LCD_DATA6 PIN_B6 
.................... #define LCD_DATA7 PIN_B7 
....................  
.................... #define LED1 PIN_A2 
.................... #define LED2 PIN_A3 
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
010F:  BSF    06.4
....................    output_float(LCD_DATA5); 
0110:  BSF    06.5
....................    output_float(LCD_DATA6); 
0111:  BSF    06.6
....................    output_float(LCD_DATA7); 
0112:  BSF    06.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0113:  BCF    03.5
0114:  BSF    06.2
0115:  BSF    03.5
0116:  BCF    06.2
....................    delay_cycles(1); 
0117:  NOP
....................    lcd_output_enable(1); 
0118:  BCF    03.5
0119:  BSF    06.0
011A:  BSF    03.5
011B:  BCF    06.0
....................    delay_cycles(1); 
011C:  NOP
....................    high = lcd_read_nibble(); 
011D:  BCF    03.5
011E:  CALL   0D6
011F:  MOVF   78,W
0120:  MOVWF  2B
....................        
....................    lcd_output_enable(0); 
0121:  BCF    06.0
0122:  BSF    03.5
0123:  BCF    06.0
....................    delay_cycles(1); 
0124:  NOP
....................    lcd_output_enable(1); 
0125:  BCF    03.5
0126:  BSF    06.0
0127:  BSF    03.5
0128:  BCF    06.0
....................    delay_us(1); 
0129:  GOTO   12A
012A:  NOP
....................    low = lcd_read_nibble(); 
012B:  BCF    03.5
012C:  CALL   0D6
012D:  MOVF   78,W
012E:  MOVWF  2A
....................        
....................    lcd_output_enable(0); 
012F:  BCF    06.0
0130:  BSF    03.5
0131:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0132:  BCF    06.4
....................    output_drive(LCD_DATA5); 
0133:  BCF    06.5
....................    output_drive(LCD_DATA6); 
0134:  BCF    06.6
....................    output_drive(LCD_DATA7); 
0135:  BCF    06.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0136:  BCF    03.5
0137:  SWAPF  2B,W
0138:  MOVWF  77
0139:  MOVLW  F0
013A:  ANDWF  77,F
013B:  MOVF   77,W
013C:  IORWF  2A,W
013D:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
00D6:  CLRF   2C
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
00D7:  BSF    03.5
00D8:  BSF    06.4
00D9:  MOVLW  00
00DA:  BCF    03.5
00DB:  BTFSC  06.4
00DC:  MOVLW  01
00DD:  IORWF  2C,F
....................    n |= input(LCD_DATA5) << 1; 
00DE:  BSF    03.5
00DF:  BSF    06.5
00E0:  MOVLW  00
00E1:  BCF    03.5
00E2:  BTFSC  06.5
00E3:  MOVLW  01
00E4:  MOVWF  77
00E5:  BCF    03.0
00E6:  RLF    77,F
00E7:  MOVF   77,W
00E8:  IORWF  2C,F
....................    n |= input(LCD_DATA6) << 2; 
00E9:  BSF    03.5
00EA:  BSF    06.6
00EB:  MOVLW  00
00EC:  BCF    03.5
00ED:  BTFSC  06.6
00EE:  MOVLW  01
00EF:  MOVWF  77
00F0:  RLF    77,F
00F1:  RLF    77,F
00F2:  MOVLW  FC
00F3:  ANDWF  77,F
00F4:  MOVF   77,W
00F5:  IORWF  2C,F
....................    n |= input(LCD_DATA7) << 3; 
00F6:  BSF    03.5
00F7:  BSF    06.7
00F8:  MOVLW  00
00F9:  BCF    03.5
00FA:  BTFSC  06.7
00FB:  MOVLW  01
00FC:  MOVWF  77
00FD:  RLF    77,F
00FE:  RLF    77,F
00FF:  RLF    77,F
0100:  MOVLW  F8
0101:  ANDWF  77,F
0102:  MOVF   77,W
0103:  IORWF  2C,F
....................     
....................    return(n); 
0104:  MOVF   2C,W
0105:  MOVWF  78
....................   #else 
0106:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
00A9:  BTFSC  2B.0
00AA:  GOTO   0AD
00AB:  BCF    06.4
00AC:  GOTO   0AE
00AD:  BSF    06.4
00AE:  BSF    03.5
00AF:  BCF    06.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
00B0:  BCF    03.5
00B1:  BTFSC  2B.1
00B2:  GOTO   0B5
00B3:  BCF    06.5
00B4:  GOTO   0B6
00B5:  BSF    06.5
00B6:  BSF    03.5
00B7:  BCF    06.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
00B8:  BCF    03.5
00B9:  BTFSC  2B.2
00BA:  GOTO   0BD
00BB:  BCF    06.6
00BC:  GOTO   0BE
00BD:  BSF    06.6
00BE:  BSF    03.5
00BF:  BCF    06.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
00C0:  BCF    03.5
00C1:  BTFSC  2B.3
00C2:  GOTO   0C5
00C3:  BCF    06.7
00C4:  GOTO   0C6
00C5:  BSF    06.7
00C6:  BSF    03.5
00C7:  BCF    06.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
00C8:  NOP
....................    lcd_output_enable(1); 
00C9:  BCF    03.5
00CA:  BSF    06.0
00CB:  BSF    03.5
00CC:  BCF    06.0
....................    delay_us(2); 
00CD:  GOTO   0CE
00CE:  GOTO   0CF
00CF:  GOTO   0D0
....................    lcd_output_enable(0); 
00D0:  BCF    03.5
00D1:  BCF    06.0
00D2:  BSF    03.5
00D3:  BCF    06.0
00D4:  BCF    03.5
00D5:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0107:  BSF    03.5
0108:  BCF    06.0
....................    lcd_rs_tris(); 
0109:  BCF    05.0
....................    lcd_rw_tris(); 
010A:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
010B:  BCF    03.5
010C:  BCF    05.0
010D:  BSF    03.5
010E:  BCF    05.0
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
013E:  MOVF   78,W
013F:  MOVWF  2A
0140:  BTFSS  2A.7
0141:  GOTO   144
0142:  BSF    03.5
0143:  GOTO   10F
....................    lcd_output_rs(address); 
0144:  MOVF   28,F
0145:  BTFSS  03.2
0146:  GOTO   149
0147:  BCF    05.0
0148:  GOTO   14A
0149:  BSF    05.0
014A:  BSF    03.5
014B:  BCF    05.0
....................    delay_cycles(1); 
014C:  NOP
....................    lcd_output_rw(0); 
014D:  BCF    03.5
014E:  BCF    06.2
014F:  BSF    03.5
0150:  BCF    06.2
....................    delay_cycles(1); 
0151:  NOP
....................    lcd_output_enable(0); 
0152:  BCF    03.5
0153:  BCF    06.0
0154:  BSF    03.5
0155:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
0156:  BCF    03.5
0157:  SWAPF  29,W
0158:  MOVWF  2A
0159:  MOVLW  0F
015A:  ANDWF  2A,F
015B:  MOVF   2A,W
015C:  MOVWF  2B
015D:  CALL   0A9
....................    lcd_send_nibble(n & 0xf); 
015E:  MOVF   29,W
015F:  ANDLW  0F
0160:  MOVWF  2A
0161:  MOVWF  2B
0162:  CALL   0A9
0163:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
0164:  BSF    03.5
0165:  BCF    06.4
....................    output_drive(LCD_DATA5); 
0166:  BCF    06.5
....................    output_drive(LCD_DATA6); 
0167:  BCF    06.6
....................    output_drive(LCD_DATA7); 
0168:  BCF    06.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
0169:  BCF    06.0
....................    lcd_rs_tris(); 
016A:  BCF    05.0
....................    lcd_rw_tris(); 
016B:  BCF    06.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
016C:  BCF    03.5
016D:  BCF    05.0
016E:  BSF    03.5
016F:  BCF    05.0
....................    lcd_output_rw(0); 
0170:  BCF    03.5
0171:  BCF    06.2
0172:  BSF    03.5
0173:  BCF    06.2
....................    lcd_output_enable(0); 
0174:  BCF    03.5
0175:  BCF    06.0
0176:  BSF    03.5
0177:  BCF    06.0
....................      
....................    delay_ms(15); 
0178:  MOVLW  0F
0179:  BCF    03.5
017A:  MOVWF  24
017B:  CALL   094
....................    for(i=1;i<=3;++i) 
017C:  MOVLW  01
017D:  MOVWF  22
017E:  MOVF   22,W
017F:  SUBLW  03
0180:  BTFSS  03.0
0181:  GOTO   18A
....................    { 
....................        lcd_send_nibble(3); 
0182:  MOVLW  03
0183:  MOVWF  2B
0184:  CALL   0A9
....................        delay_ms(5); 
0185:  MOVLW  05
0186:  MOVWF  24
0187:  CALL   094
0188:  INCF   22,F
0189:  GOTO   17E
....................    } 
....................     
....................    lcd_send_nibble(2); 
018A:  MOVLW  02
018B:  MOVWF  2B
018C:  CALL   0A9
....................    delay_ms(5); 
018D:  MOVLW  05
018E:  MOVWF  24
018F:  CALL   094
....................    for(i=0;i<=3;++i) 
0190:  CLRF   22
0191:  MOVF   22,W
0192:  SUBLW  03
0193:  BTFSS  03.0
0194:  GOTO   19E
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0195:  MOVF   22,W
0196:  CALL   004
0197:  MOVWF  23
0198:  CLRF   28
0199:  MOVF   23,W
019A:  MOVWF  29
019B:  CALL   107
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
019C:  INCF   22,F
019D:  GOTO   191
019E:  GOTO   20D (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
019F:  DECFSZ 25,W
01A0:  GOTO   1A2
01A1:  GOTO   1A5
....................       address=LCD_LINE_TWO; 
01A2:  MOVLW  40
01A3:  MOVWF  26
01A4:  GOTO   1A6
....................    else 
....................       address=0; 
01A5:  CLRF   26
....................       
....................    address+=x-1; 
01A6:  MOVLW  01
01A7:  SUBWF  24,W
01A8:  ADDWF  26,F
....................    lcd_send_byte(0,0x80|address); 
01A9:  MOVF   26,W
01AA:  IORLW  80
01AB:  MOVWF  27
01AC:  CLRF   28
01AD:  MOVF   27,W
01AE:  MOVWF  29
01AF:  CALL   107
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
01B0:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
01B1:  MOVF   23,W
01B2:  XORLW  07
01B3:  BTFSC  03.2
01B4:  GOTO   1BF
01B5:  XORLW  0B
01B6:  BTFSC  03.2
01B7:  GOTO   1C4
01B8:  XORLW  06
01B9:  BTFSC  03.2
01BA:  GOTO   1CC
01BB:  XORLW  02
01BC:  BTFSC  03.2
01BD:  GOTO   1D2
01BE:  GOTO   1D7
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
01BF:  MOVLW  01
01C0:  MOVWF  24
01C1:  MOVWF  25
01C2:  CALL   19F
01C3:  GOTO   1DC
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
01C4:  CLRF   28
01C5:  MOVLW  01
01C6:  MOVWF  29
01C7:  CALL   107
....................                      delay_ms(2); 
01C8:  MOVLW  02
01C9:  MOVWF  24
01CA:  CALL   094
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
01CB:  GOTO   1DC
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
01CC:  MOVLW  01
01CD:  MOVWF  24
01CE:  MOVLW  02
01CF:  MOVWF  25
01D0:  CALL   19F
01D1:  GOTO   1DC
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
01D2:  CLRF   28
01D3:  MOVLW  10
01D4:  MOVWF  29
01D5:  CALL   107
01D6:  GOTO   1DC
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
01D7:  MOVLW  01
01D8:  MOVWF  28
01D9:  MOVF   23,W
01DA:  MOVWF  29
01DB:  CALL   107
....................      #endif 
....................    } 
01DC:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... void main() 
*
0202:  MOVF   03,W
0203:  ANDLW  1F
0204:  MOVWF  03
0205:  BSF    03.5
0206:  BCF    06.3
0207:  BCF    03.5
0208:  BSF    06.3
0209:  MOVLW  07
020A:  MOVWF  1F
020B:  BCF    03.7
.................... { 
....................  
....................   char k; 
....................  
....................  
....................    lcd_init(); 
020C:  GOTO   164
....................  
....................    lcd_putc("\fReady...\n"); 
020D:  CLRF   22
020E:  MOVF   22,W
020F:  CALL   00C
0210:  IORLW  00
0211:  BTFSC  03.2
0212:  GOTO   217
0213:  INCF   22,F
0214:  MOVWF  23
0215:  CALL   1B1
0216:  GOTO   20E
....................    output_low(LED1); 
0217:  BSF    03.5
0218:  BCF    05.2
0219:  BCF    03.5
021A:  BCF    05.2
....................    output_low(LED2); 
021B:  BSF    03.5
021C:  BCF    05.3
021D:  BCF    03.5
021E:  BCF    05.3
....................  
....................    while(TRUE) 
....................    { 
....................  
....................       //Example using external LCD 
....................       k = getc();       
021F:  GOTO   1DD
0220:  MOVF   78,W
0221:  MOVWF  21
....................       switch (k)  
0222:  MOVF   21,W
0223:  XORLW  61
0224:  BTFSC  03.2
0225:  GOTO   236
0226:  XORLW  03
0227:  BTFSC  03.2
0228:  GOTO   246
0229:  XORLW  01
022A:  BTFSC  03.2
022B:  GOTO   256
022C:  XORLW  07
022D:  BTFSC  03.2
022E:  GOTO   266
022F:  XORLW  01
0230:  BTFSC  03.2
0231:  GOTO   276
0232:  XORLW  03
0233:  BTFSC  03.2
0234:  GOTO   28A
0235:  GOTO   28A
....................       { 
....................          case 'a': 
....................             printf(LCD_PUTC, "\fLigar quarto \n"); 
0236:  CLRF   22
0237:  MOVF   22,W
0238:  CALL   01B
0239:  INCF   22,F
023A:  MOVWF  77
023B:  MOVWF  23
023C:  CALL   1B1
023D:  MOVLW  0F
023E:  SUBWF  22,W
023F:  BTFSS  03.2
0240:  GOTO   237
....................             output_high(LED1);          
0241:  BSF    03.5
0242:  BCF    05.2
0243:  BCF    03.5
0244:  BSF    05.2
....................             break; 
0245:  GOTO   29D
....................          case 'b': 
....................             printf(LCD_PUTC, "\fDesligar quarto \n"); 
0246:  CLRF   22
0247:  MOVF   22,W
0248:  CALL   02F
0249:  INCF   22,F
024A:  MOVWF  77
024B:  MOVWF  23
024C:  CALL   1B1
024D:  MOVLW  12
024E:  SUBWF  22,W
024F:  BTFSS  03.2
0250:  GOTO   247
....................             output_low(LED1); 
0251:  BSF    03.5
0252:  BCF    05.2
0253:  BCF    03.5
0254:  BCF    05.2
....................             break; 
0255:  GOTO   29D
....................          case 'c': 
....................             printf(LCD_PUTC, "\fLigar sala \n"); 
0256:  CLRF   22
0257:  MOVF   22,W
0258:  CALL   046
0259:  INCF   22,F
025A:  MOVWF  77
025B:  MOVWF  23
025C:  CALL   1B1
025D:  MOVLW  0D
025E:  SUBWF  22,W
025F:  BTFSS  03.2
0260:  GOTO   257
....................             output_high(LED2); 
0261:  BSF    03.5
0262:  BCF    05.3
0263:  BCF    03.5
0264:  BSF    05.3
....................             break; 
0265:  GOTO   29D
....................          case 'd': 
....................             printf(LCD_PUTC, "\fDesligar sala \n"); 
0266:  CLRF   22
0267:  MOVF   22,W
0268:  CALL   058
0269:  INCF   22,F
026A:  MOVWF  77
026B:  MOVWF  23
026C:  CALL   1B1
026D:  MOVLW  10
026E:  SUBWF  22,W
026F:  BTFSS  03.2
0270:  GOTO   267
....................             output_low(LED2); 
0271:  BSF    03.5
0272:  BCF    05.3
0273:  BCF    03.5
0274:  BCF    05.3
....................             break; 
0275:  GOTO   29D
....................          case 'e': 
....................             printf(LCD_PUTC, "\fLigar tudo \n"); 
0276:  CLRF   22
0277:  MOVF   22,W
0278:  CALL   06D
0279:  INCF   22,F
027A:  MOVWF  77
027B:  MOVWF  23
027C:  CALL   1B1
027D:  MOVLW  0D
027E:  SUBWF  22,W
027F:  BTFSS  03.2
0280:  GOTO   277
....................             output_high(LED1); 
0281:  BSF    03.5
0282:  BCF    05.2
0283:  BCF    03.5
0284:  BSF    05.2
....................             output_high(LED2); 
0285:  BSF    03.5
0286:  BCF    05.3
0287:  BCF    03.5
0288:  BSF    05.3
....................             break; 
0289:  GOTO   29D
....................          case 'f': 
....................          default: 
....................             printf(LCD_PUTC, "\fDesligar tudo \n"); 
028A:  CLRF   22
028B:  MOVF   22,W
028C:  CALL   07F
028D:  INCF   22,F
028E:  MOVWF  77
028F:  MOVWF  23
0290:  CALL   1B1
0291:  MOVLW  10
0292:  SUBWF  22,W
0293:  BTFSS  03.2
0294:  GOTO   28B
....................             output_low(LED1); 
0295:  BSF    03.5
0296:  BCF    05.2
0297:  BCF    03.5
0298:  BCF    05.2
....................             output_low(LED2); 
0299:  BSF    03.5
029A:  BCF    05.3
029B:  BCF    03.5
029C:  BCF    05.3
....................             break; 
....................           
....................       } 
029D:  GOTO   21F
....................    } 
....................  
.................... } 
029E:  SLEEP

Configuration Fuses:
   Word  1: 3F62   NOWDT PUT HS MCLR BROWNOUT NOLVP NOCPD NOPROTECT
