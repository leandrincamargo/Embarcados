CCS PCM C Compiler, Version 5.008, 5967               16-nov-18 20:41

               Filename:   D:\GIT\GitHub\Embarcados\PIC\pic.lst

               ROM used:   393 words (19%)
                           Largest free fragment is 1655
               RAM used:   6 (3%) at main() level
                           17 (8%) worst case
               Stack used: 4 locations
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   15F
0003:  NOP
.................... #include <pic.h> 
.................... #include <16F628A.h> 
.................... //////// Standard Header file for the PIC16F628A device //////////////// 
.................... #device PIC16F628A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  BCF    0A.0
000D:  BCF    0A.1
000E:  BCF    0A.2
000F:  ADDWF  02,F
0010:  RETLW  54
0011:  RETLW  65
0012:  RETLW  73
0013:  RETLW  74
0014:  RETLW  65
0015:  RETLW  00
....................  
.................... #list 
....................  
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=12MHz) 
0016:  MOVLW  23
0017:  MOVWF  04
0018:  BCF    03.7
0019:  MOVF   00,W
001A:  BTFSC  03.2
001B:  GOTO   02A
001C:  MOVLW  03
001D:  MOVWF  78
001E:  CLRF   77
001F:  DECFSZ 77,F
0020:  GOTO   01F
0021:  DECFSZ 78,F
0022:  GOTO   01E
0023:  MOVLW  E3
0024:  MOVWF  77
0025:  DECFSZ 77,F
0026:  GOTO   025
0027:  NOP
0028:  DECFSZ 00,F
0029:  GOTO   01C
002A:  RETURN
....................  
.................... #define LED PIN_A0 
.................... #define DELAY 1000 
....................  
....................  
....................  
....................  
.................... #define LCD_ENABLE_PIN PIN_B0 
.................... #define LCD_RS_PIN PIN_B1 
.................... #define LCD_RW_PIN PIN_B2 
.................... #define LCD_DATA4 PIN_B3 
.................... #define LCD_DATA5 PIN_B4 
.................... #define LCD_DATA6 PIN_B5 
.................... #define LCD_DATA7 PIN_B6 
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
0091:  BSF    06.3
....................    output_float(LCD_DATA5); 
0092:  BSF    06.4
....................    output_float(LCD_DATA6); 
0093:  BSF    06.5
....................    output_float(LCD_DATA7); 
0094:  BSF    06.6
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0095:  BCF    03.5
0096:  BSF    06.2
0097:  BSF    03.5
0098:  BCF    06.2
....................    delay_cycles(1); 
0099:  NOP
....................    lcd_output_enable(1); 
009A:  BCF    03.5
009B:  BSF    06.0
009C:  BSF    03.5
009D:  BCF    06.0
....................    delay_cycles(1); 
009E:  NOP
....................    high = lcd_read_nibble(); 
009F:  BCF    03.5
00A0:  CALL   058
00A1:  MOVF   78,W
00A2:  MOVWF  2A
....................        
....................    lcd_output_enable(0); 
00A3:  BCF    06.0
00A4:  BSF    03.5
00A5:  BCF    06.0
....................    delay_cycles(1); 
00A6:  NOP
....................    lcd_output_enable(1); 
00A7:  BCF    03.5
00A8:  BSF    06.0
00A9:  BSF    03.5
00AA:  BCF    06.0
....................    delay_us(1); 
00AB:  GOTO   0AC
00AC:  NOP
....................    low = lcd_read_nibble(); 
00AD:  BCF    03.5
00AE:  CALL   058
00AF:  MOVF   78,W
00B0:  MOVWF  29
....................        
....................    lcd_output_enable(0); 
00B1:  BCF    06.0
00B2:  BSF    03.5
00B3:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00B4:  BCF    06.3
....................    output_drive(LCD_DATA5); 
00B5:  BCF    06.4
....................    output_drive(LCD_DATA6); 
00B6:  BCF    06.5
....................    output_drive(LCD_DATA7); 
00B7:  BCF    06.6
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00B8:  BCF    03.5
00B9:  SWAPF  2A,W
00BA:  MOVWF  77
00BB:  MOVLW  F0
00BC:  ANDWF  77,F
00BD:  MOVF   77,W
00BE:  IORWF  29,W
00BF:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
0058:  CLRF   2B
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0059:  BSF    03.5
005A:  BSF    06.3
005B:  MOVLW  00
005C:  BCF    03.5
005D:  BTFSC  06.3
005E:  MOVLW  01
005F:  IORWF  2B,F
....................    n |= input(LCD_DATA5) << 1; 
0060:  BSF    03.5
0061:  BSF    06.4
0062:  MOVLW  00
0063:  BCF    03.5
0064:  BTFSC  06.4
0065:  MOVLW  01
0066:  MOVWF  77
0067:  BCF    03.0
0068:  RLF    77,F
0069:  MOVF   77,W
006A:  IORWF  2B,F
....................    n |= input(LCD_DATA6) << 2; 
006B:  BSF    03.5
006C:  BSF    06.5
006D:  MOVLW  00
006E:  BCF    03.5
006F:  BTFSC  06.5
0070:  MOVLW  01
0071:  MOVWF  77
0072:  RLF    77,F
0073:  RLF    77,F
0074:  MOVLW  FC
0075:  ANDWF  77,F
0076:  MOVF   77,W
0077:  IORWF  2B,F
....................    n |= input(LCD_DATA7) << 3; 
0078:  BSF    03.5
0079:  BSF    06.6
007A:  MOVLW  00
007B:  BCF    03.5
007C:  BTFSC  06.6
007D:  MOVLW  01
007E:  MOVWF  77
007F:  RLF    77,F
0080:  RLF    77,F
0081:  RLF    77,F
0082:  MOVLW  F8
0083:  ANDWF  77,F
0084:  MOVF   77,W
0085:  IORWF  2B,F
....................     
....................    return(n); 
0086:  MOVF   2B,W
0087:  MOVWF  78
....................   #else 
0088:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
002B:  BTFSC  2A.0
002C:  GOTO   02F
002D:  BCF    06.3
002E:  GOTO   030
002F:  BSF    06.3
0030:  BSF    03.5
0031:  BCF    06.3
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0032:  BCF    03.5
0033:  BTFSC  2A.1
0034:  GOTO   037
0035:  BCF    06.4
0036:  GOTO   038
0037:  BSF    06.4
0038:  BSF    03.5
0039:  BCF    06.4
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
003A:  BCF    03.5
003B:  BTFSC  2A.2
003C:  GOTO   03F
003D:  BCF    06.5
003E:  GOTO   040
003F:  BSF    06.5
0040:  BSF    03.5
0041:  BCF    06.5
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0042:  BCF    03.5
0043:  BTFSC  2A.3
0044:  GOTO   047
0045:  BCF    06.6
0046:  GOTO   048
0047:  BSF    06.6
0048:  BSF    03.5
0049:  BCF    06.6
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
004A:  NOP
....................    lcd_output_enable(1); 
004B:  BCF    03.5
004C:  BSF    06.0
004D:  BSF    03.5
004E:  BCF    06.0
....................    delay_us(2); 
004F:  GOTO   050
0050:  GOTO   051
0051:  GOTO   052
....................    lcd_output_enable(0); 
0052:  BCF    03.5
0053:  BCF    06.0
0054:  BSF    03.5
0055:  BCF    06.0
0056:  BCF    03.5
0057:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0089:  BSF    03.5
008A:  BCF    06.0
....................    lcd_rs_tris(); 
008B:  BCF    06.1
....................    lcd_rw_tris(); 
008C:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
008D:  BCF    03.5
008E:  BCF    06.1
008F:  BSF    03.5
0090:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00C0:  MOVF   78,W
00C1:  MOVWF  29
00C2:  BTFSS  29.7
00C3:  GOTO   0C6
00C4:  BSF    03.5
00C5:  GOTO   091
....................    lcd_output_rs(address); 
00C6:  MOVF   27,F
00C7:  BTFSS  03.2
00C8:  GOTO   0CB
00C9:  BCF    06.1
00CA:  GOTO   0CC
00CB:  BSF    06.1
00CC:  BSF    03.5
00CD:  BCF    06.1
....................    delay_cycles(1); 
00CE:  NOP
....................    lcd_output_rw(0); 
00CF:  BCF    03.5
00D0:  BCF    06.2
00D1:  BSF    03.5
00D2:  BCF    06.2
....................    delay_cycles(1); 
00D3:  NOP
....................    lcd_output_enable(0); 
00D4:  BCF    03.5
00D5:  BCF    06.0
00D6:  BSF    03.5
00D7:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
00D8:  BCF    03.5
00D9:  SWAPF  28,W
00DA:  MOVWF  29
00DB:  MOVLW  0F
00DC:  ANDWF  29,F
00DD:  MOVF   29,W
00DE:  MOVWF  2A
00DF:  CALL   02B
....................    lcd_send_nibble(n & 0xf); 
00E0:  MOVF   28,W
00E1:  ANDLW  0F
00E2:  MOVWF  29
00E3:  MOVWF  2A
00E4:  CALL   02B
00E5:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00E6:  BSF    03.5
00E7:  BCF    06.3
....................    output_drive(LCD_DATA5); 
00E8:  BCF    06.4
....................    output_drive(LCD_DATA6); 
00E9:  BCF    06.5
....................    output_drive(LCD_DATA7); 
00EA:  BCF    06.6
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
00EB:  BCF    06.0
....................    lcd_rs_tris(); 
00EC:  BCF    06.1
....................    lcd_rw_tris(); 
00ED:  BCF    06.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
00EE:  BCF    03.5
00EF:  BCF    06.1
00F0:  BSF    03.5
00F1:  BCF    06.1
....................    lcd_output_rw(0); 
00F2:  BCF    03.5
00F3:  BCF    06.2
00F4:  BSF    03.5
00F5:  BCF    06.2
....................    lcd_output_enable(0); 
00F6:  BCF    03.5
00F7:  BCF    06.0
00F8:  BSF    03.5
00F9:  BCF    06.0
....................      
....................    delay_ms(15); 
00FA:  MOVLW  0F
00FB:  BCF    03.5
00FC:  MOVWF  23
00FD:  CALL   016
....................    for(i=1;i<=3;++i) 
00FE:  MOVLW  01
00FF:  MOVWF  21
0100:  MOVF   21,W
0101:  SUBLW  03
0102:  BTFSS  03.0
0103:  GOTO   10C
....................    { 
....................        lcd_send_nibble(3); 
0104:  MOVLW  03
0105:  MOVWF  2A
0106:  CALL   02B
....................        delay_ms(5); 
0107:  MOVLW  05
0108:  MOVWF  23
0109:  CALL   016
010A:  INCF   21,F
010B:  GOTO   100
....................    } 
....................     
....................    lcd_send_nibble(2); 
010C:  MOVLW  02
010D:  MOVWF  2A
010E:  CALL   02B
....................    delay_ms(5); 
010F:  MOVLW  05
0110:  MOVWF  23
0111:  CALL   016
....................    for(i=0;i<=3;++i) 
0112:  CLRF   21
0113:  MOVF   21,W
0114:  SUBLW  03
0115:  BTFSS  03.0
0116:  GOTO   120
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0117:  MOVF   21,W
0118:  CALL   004
0119:  MOVWF  22
011A:  CLRF   27
011B:  MOVF   22,W
011C:  MOVWF  28
011D:  CALL   089
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
011E:  INCF   21,F
011F:  GOTO   113
0120:  GOTO   166 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
0121:  DECFSZ 24,W
0122:  GOTO   124
0123:  GOTO   127
....................       address=LCD_LINE_TWO; 
0124:  MOVLW  40
0125:  MOVWF  25
0126:  GOTO   128
....................    else 
....................       address=0; 
0127:  CLRF   25
....................       
....................    address+=x-1; 
0128:  MOVLW  01
0129:  SUBWF  23,W
012A:  ADDWF  25,F
....................    lcd_send_byte(0,0x80|address); 
012B:  MOVF   25,W
012C:  IORLW  80
012D:  MOVWF  26
012E:  CLRF   27
012F:  MOVF   26,W
0130:  MOVWF  28
0131:  CALL   089
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0132:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
0133:  MOVF   22,W
0134:  XORLW  07
0135:  BTFSC  03.2
0136:  GOTO   141
0137:  XORLW  0B
0138:  BTFSC  03.2
0139:  GOTO   146
013A:  XORLW  06
013B:  BTFSC  03.2
013C:  GOTO   14E
013D:  XORLW  02
013E:  BTFSC  03.2
013F:  GOTO   154
0140:  GOTO   159
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0141:  MOVLW  01
0142:  MOVWF  23
0143:  MOVWF  24
0144:  CALL   121
0145:  GOTO   15E
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
0146:  CLRF   27
0147:  MOVLW  01
0148:  MOVWF  28
0149:  CALL   089
....................                      delay_ms(2); 
014A:  MOVLW  02
014B:  MOVWF  23
014C:  CALL   016
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
014D:  GOTO   15E
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
014E:  MOVLW  01
014F:  MOVWF  23
0150:  MOVLW  02
0151:  MOVWF  24
0152:  CALL   121
0153:  GOTO   15E
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0154:  CLRF   27
0155:  MOVLW  10
0156:  MOVWF  28
0157:  CALL   089
0158:  GOTO   15E
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0159:  MOVLW  01
015A:  MOVWF  27
015B:  MOVF   22,W
015C:  MOVWF  28
015D:  CALL   089
....................      #endif 
....................    } 
015E:  GOTO   16D (RETURN)
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... void main() 
015F:  MOVF   03,W
0160:  ANDLW  1F
0161:  MOVWF  03
0162:  MOVLW  07
0163:  MOVWF  1F
0164:  BCF    03.7
.................... { 
....................  
....................    lcd_init(); 
0165:  GOTO   0E6
....................     
....................    //Example blinking LED program 
....................    while(true) 
....................    { 
....................       printf(lcd_putc, "Teste"); 
0166:  CLRF   21
0167:  MOVF   21,W
0168:  CALL   00C
0169:  INCF   21,F
016A:  MOVWF  77
016B:  MOVWF  22
016C:  GOTO   133
016D:  MOVLW  05
016E:  SUBWF  21,W
016F:  BTFSS  03.2
0170:  GOTO   167
....................       output_low(LED); 
0171:  BSF    03.5
0172:  BCF    05.0
0173:  BCF    03.5
0174:  BCF    05.0
....................       delay_ms(DELAY); 
0175:  MOVLW  04
0176:  MOVWF  21
0177:  MOVLW  FA
0178:  MOVWF  23
0179:  CALL   016
017A:  DECFSZ 21,F
017B:  GOTO   177
....................       output_high(LED); 
017C:  BSF    03.5
017D:  BCF    05.0
017E:  BCF    03.5
017F:  BSF    05.0
....................       delay_ms(DELAY); 
0180:  MOVLW  04
0181:  MOVWF  21
0182:  MOVLW  FA
0183:  MOVWF  23
0184:  CALL   016
0185:  DECFSZ 21,F
0186:  GOTO   182
0187:  GOTO   166
....................        
....................    } 
.................... } 
0188:  SLEEP

Configuration Fuses:
   Word  1: 3F22   NOWDT PUT HS MCLR NOBROWNOUT NOLVP NOCPD NOPROTECT
